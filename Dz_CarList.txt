#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <Windows.h>
#include <ctime>
#include <sstream>
#include <iomanip>

using namespace std;

void end()
{
	cout << "\nERROR\n";
	system("pause");
	exit(0);
}

//enum cat {sport , heavy , light };

struct car // Initialization struct car
{
	int id;
	string mark;
	int year;
	string category; // Categories: "sport", "heavy", "light"
	float price;
	bool old;
};

void main()
{
	srand(time(NULL));
	setlocale(LC_ALL, "Rus");

	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	ifstream fin;
	ofstream fout;

	bool fail = 1;

	const string mainway = "Dz_CarList_input.txt";

	while (fail)
	{
		system("cls");
		fail = 0;
		cout << "Need data bases's name. Example: C:\\\\Program Files\\\\database.txt (1 for " << mainway << "; 0 for exit)\n Name >> "; // Enter database's way
		string database;
		cin >> database;
		if (database == "1")
			database = mainway;
		if (database == "0")
			exit(0);

		fin.open(database); // A try to connect to database


		cout << "\nConnecting to " << database << endl << endl;

		Sleep(500);
		if (!fin.is_open()) // Fail
		{
			cout << " Failure connection";
			Sleep(500);
			cout << "\n Please Retry\n Retry in" << endl;
			Sleep(500);
			cout << " 3";
			Sleep(500);
			cout << " 2";
			Sleep(500);
			cout << " 1";
			Sleep(500);
			fail = 1;
		}
	}

	vector<car> ts;

	if (fin.is_open()) // Successful connecting to database
	{
		cout << " Successful connection" << endl << endl;
		int counterids = 1;
		while (!fin.eof())
		{
			bool eror = 0;
			car buf;
			fin >> buf.id;
			if (buf.id < 1)
			{
				eror = 1;
			}

			fin >> buf.mark;
			fin >> buf.category;

			if (buf.category != "light" && buf.category != "heavy" && buf.category != "sport")
			{
				eror = 1;
			}

			fin >> buf.price;
			if (buf.price < 0)
			{
				eror = 1;
			}

			fin >> buf.year;

			if (buf.year < 1768)
			{
				eror = 1;
			}
			fin >> buf.old;
			if (!eror)
				ts.push_back(buf);
		}
		fin.close();
		Sleep(500);
		system("cls");
	}


	int answer = -1;

	while (answer != 0) // Main cycle
	{
		bool empty = 0;

		if (ts.size() < 1)
		{
			empty = true;
			cout << "Warning! DataBase is empty, you can add car (#2)\n\n";
		}

		cout << "  --Menu--\n"; // Menu
		cout << " 1 Car list \n 2 Add car \n 3 Remove car \n 4 Show specific car category \n 5 Save as a file" << endl;
		cout << " 6 Sort by years \n 7 Show car with specific price \n 8 Save Specific Car's info \n 0 exit\n" << endl;
		cout << "Answer >> ";

		cin >> answer;

		system("cls"); // Remove menu after answer


		if (ts.size() < 1)
			empty = 1;

		switch (answer)
		{

		case 1: // Car list
		{

			if (!empty)
			{
				cout << "  --Car List--";
				for (int i = 0; i < ts.size(); i++)
				{
					cout << endl << " ";
					cout << left << setw(4) << ts[i].id << setw(10) << ts[i].mark << setw(7) << ts[i].category << ts[i].price << setw(3) << "$" << ts[i].year << setw(3) << "y" << "Had beed used? ";
					if (ts[i].old)
						cout << "Yes" << endl;
					else
						cout << "No" << endl;
				}
				cout << endl;
			}
			break;
		}

		case 2: // Add Car
		{
			car buf;
			cout << "Id >> "; // Add id
			cin >> buf.id;

			if (buf.id < 1)
			{
				cout << " Invalid id\n\n";
				break;
			}

			cout << "Mark >> "; // Add mark
			cin >> buf.mark;

			cout << "Category (sport, light, heavy) >> "; // Add category
			cin >> buf.category;
			if (buf.category != "light" && buf.category != "heavy" && buf.category != "sport")
			{
				cout << " Invalid category\n\n";
				break;
			}

			cout << "Price >> "; // Add price
			cin >> buf.price;
			if (buf.price < 0)
			{
				cout << " Invalid price\n\n";
				break;
			}

			cout << "Year >> "; // Add year
			cin >> buf.year;
			if (buf.year < 1768) // 1768 year - first car
			{
				cout << " Invalid year\n\n";
				break;
			}

			cout << "Had been used?(0/1) >> "; // Used yes or no
			cin >> buf.old;
			if (buf.old != 0 && buf.old != 1)
			{
				cout << " Invalid answer\n\n";
				break;
			}
			ts.push_back(buf); // Add new car to car list
			cout << endl;
			break;
		}

		case 3: // Remove Car
		{
			if (!empty)
			{
				char del; // Choose Remove Mode
				cout << "Remove id / mark / category / price ( > < = ) / year ( > < = ) / used ? (i/m/c/p/y/u) >> ";
				cin >> del;

				if (del != 'i' && del != 'm' && del != 'c' && del != 'p' && del != 'y' && del != 'u') // Check Remove Mode
				{
					cout << " Unknown Remove Mode\n\n";
					break;
				}

				for (int i = 0; i < ts.size(); i++) // Show car list
				{
					cout << endl << " ";
					cout << left << setw(4) << ts[i].id << setw(10) << ts[i].mark << setw(7) << ts[i].category << ts[i].price << setw(3) << "$" << ts[i].year << setw(3) << "y" << "Had beed used? ";
					if (ts[i].old)
						cout << "Yes" << endl;
					else
						cout << "No" << endl;
				}
				cout << endl;

				int delcounter = 0; // Initialization deleted cars' counter

				if (del == 'i') // Remove Id Mode
				{
					int id;
					cout << "Enter id >> "; // Enter Id
					cin >> id;
					if (id < 1) // Check Id
					{
						cout << " Invalid Id\n\n";
						break;
					}
					for (int i = 0; i < ts.size(); i++)
					{
						if (ts[i].id == id)
						{
							ts.erase(ts.begin() + i);
							delcounter++;
							i = -1;
						}
					}
				}

				if (del == 'm') // Remove Mark Mode
				{
					string mark;
					cout << "Enter mark >> "; // Enter mark
					cin >> mark;
					for (int i = 0; i < ts.size(); i++)
					{
						if (ts[i].mark == mark)
						{
							ts.erase(ts.begin() + i);
							delcounter++;
							i = -1;
						}
					}
				}

				if (del == 'c') // Remove Category Mode
				{
					string category;
					char mode;
					cout << "Enter mode: Remove specific category / Remove all categories without specific (s/a) >> "; // Choose Remove Category Mode
					cin >> mode;

					if (mode != 's' && mode != 'a') // Check Remove Category Mode
					{
						cout << " Unknown Remove Category Mode\n\n";
						break;
					}

					cout << "Enter category >> ";
					cin >> category;

					if (category != "light" && category != "heavy" && category != "sport") // Check category
					{
						cout << " Invalid category\n\n";
						break;
					}

					if (mode == 's') // S Remove Category Mode
						for (int i = 0; i < ts.size(); i++)
						{
							if (ts[i].category == category)
							{
								ts.erase(ts.begin() + i);
								delcounter++;
								i = -1;
							}
						}
					if (mode == 'a') // A Remove Category Mode
						for (int i = 0; i < ts.size(); i++)
						{
							if (ts[i].category != category)
							{
								ts.erase(ts.begin() + i);
								delcounter++;
								i = -1;
							}
						}
				}

				if (del == 'p') // Remove  Price Mode
				{
					float price;
					char mode;

					cout << "Enter Remove Price mode: cheeper/expensive/same (c/e/s) >> "; //  Choose Remove Price Mode
					cin >> mode;

					if (mode != 'c' && mode != 'e' && mode != 's') // Check Remove Price Mode
					{
						cout << " Unknown Remove Price Mode\n\n";
						break;
					}

					cout << "Enter price >> "; // Enter price
					cin >> price;
					if (price < 1) // Check price
					{
						cout << " Invalid price\n\n";
						break;
					}

					if (mode == 'c') // C Remove Price Mode
						for (int i = 0; i < ts.size(); i++)
						{
							if (ts[i].price < price)
							{
								ts.erase(ts.begin() + i);
								delcounter++;
								i = -1;
							}
						}

					if (mode == 'e') // E Remove Price Mode
						for (int i = 0; i < ts.size(); i++)
						{
							if (ts[i].price > price)
							{
								ts.erase(ts.begin() + i);
								delcounter++;
								i = -1;
							}
						}

					if (mode == 's') // S Remove Price Mode
						for (int i = 0; i < ts.size(); i++)
						{
							if (ts[i].price == price)
							{
								ts.erase(ts.begin() + i);
								delcounter++;
								i = -1;
							}
						}
				}

				if (del == 'y') // Remove Year Mode
				{
					int year;
					char mode;
					cout << "Enter Remove Year mode: older / newer / specific year (o/n/s)  >> "; // Choose Remove Year Mode
					cin >> mode;

					if (mode != 'o' && mode != 'n' && mode != 's') // Check Remove Year Mode
					{
						cout << " Unknown Remove Year Mode\n\n";
						break;
					}

					cin >> year; // Enter Year
					if (year < 1768)
					{
						cout << " Invalid year\n\n";
						break;
					}

					if (mode == 'o') // O Remove Year Mode
						for (int i = 0; i < ts.size(); i++)
						{
							if (ts[i].year > year)
							{
								ts.erase(ts.begin() + i);
								delcounter++;
								i = -1;
							}
						}

					if (mode == 'n') // N Remove Year Mode
						for (int i = 0; i < ts.size(); i++)
						{
							if (ts[i].year < year)
							{
								ts.erase(ts.begin() + i);
								delcounter++;
								i = -1;
							}
						}

					if (mode == 's') // S Remove Year Mode
						for (int i = 0; i < ts.size(); i++)
						{
							if (ts[i].year == year)
							{
								ts.erase(ts.begin() + i);
								delcounter++;
								i = -1;
							}
						}
				}

				if (del == 'u') // Remove Used Mode
				{
					int us;
					char mode;

					cout << "Enter Remove Used Mode: Remove used cars / remove not used cars (u/n) >> "; // Choose Remove Used Mode
					cin >> mode;
					if (mode != 'u' && mode != 'n') // Check Remove Used Mode
					{
						cout << " Unknown Remove Used Mode\n\n";
						break;
					}

					if (mode == 'u') // U Remove Used Mode
						for (int i = 0; i < ts.size(); i++)
						{
							if (ts[i].old)
							{
								ts.erase(ts.begin() + i);
								delcounter++;
								i = -1;
							}
						}
					if (mode == 'n') // N Remove Used Mode
						for (int i = 0; i < ts.size(); i++)
						{
							if (!ts[i].old)
							{
								ts.erase(ts.begin() + i);
								delcounter++;
								i = -1;
							}
						}
				}

				cout << " ";
				if (delcounter > 0)
					cout << delcounter << " cars removed\n";
				else
					cout << " No removed cars\n";

				delcounter = 0;
				cout << endl;
			}
			break;
		}

		case 4: // Show Specific Category
		{
			if (!empty)
			{
				string category;
				cout << "Enter category (sport, light, heavy) >> ";
				cin >> category;
				if (category != "light" && category != "heavy" && category != "sport")
				{
					cout << endl << " Unknown category\n\n";
					break;
				}
				for (int i = 0; i < ts.size(); i++)
				{
					if (ts[i].category == category)
					{
						cout << endl << " ";
						cout << left << setw(4) << ts[i].id << setw(10) << ts[i].mark << setw(7) << ts[i].category << ts[i].price << setw(3) << "$" << ts[i].year << setw(3) << "y" << "Had beed used? ";
						if (ts[i].old)
							cout << "Yes";
						else
							cout << "No";
						cout << endl;
					}
				}
				cout << endl;
			}
			break;
		}

		case 5: // Save specific as a file
		{
			if (!empty)
			{
				string way;
				cout << "Enter file position with txt. Example, cars.txt - file: C:\\\\Program Files\\\\cars.txt) >> ";
				cin >> way;
				fout.open(way);
				for (int i = 0; i < ts.size(); i++)
				{
					fout << ts[i].id << " " << ts[i].mark << " " << ts[i].category << " " << ts[i].price << " " << ts[i].year << " " << ts[i].old;
					fout << endl;
				}
				fout.close();
				cout << endl;
			}
			break;
		}

		case 6: // Sort by years
		{
			if (!empty)
			{
				cout << "Sort Mode Up (1 2 3) or Down (3 2 1) (u/d) >> ";
				char mode;
				cin >> mode;
				if (mode != 'u' && mode != 'd')
				{
					cout << " Unknown Sort Mode\n\n";
				}

				if (mode == 'u')
					for (int i = 0; i < ts.size() - 1; i++)
					{
						if (ts[i].year > ts[i + 1].year)
						{
							swap(ts[i], ts[i + 1]);
							i = -1;
						}
					}
				if (mode == 'd')
					for (int i = 0; i < ts.size() - 1; i++)
					{
						if (ts[i].year < ts[i + 1].year)
						{
							swap(ts[i], ts[i + 1]);
							i = -1;
						}
					}
				cout << endl;
			}
			break;
		}

		case 7: // Show More Less Same Price
		{
			if (!empty)
			{
				float price;
				char mode;

				cout << "Enter Show Price Mode: More Less Same (m/l/s) >> "; // Choose Show Price Mode
				cin >> mode;
				if (mode != 'm' && mode != 'l' && mode != 's') // Chack Mode
				{
					cout << " Unknown Show Price Mode\n\n";
					break;
				}

				cout << "Enter price >> "; // Enter Price
				cin >> price;
				if (price < 0) // Check price
				{
					cout << " Invalid price\n\n";
					break;
				}

				if (mode == 'm')
					for (int i = 0; i < ts.size(); i++)
					{
						if (ts[i].price > price)
						{
							cout << endl << " ";
							cout << left << setw(4) << ts[i].id << setw(10) << ts[i].mark << setw(7) << ts[i].category << ts[i].price << setw(3) << "$" << ts[i].year << setw(3) << "y" << "Had beed used? ";
							if (ts[i].old)
								cout << "Yes";
							else
								cout << "No";
							cout << endl;
						}
					}

				if (mode == 'l')
					for (int i = 0; i < ts.size(); i++)
					{
						if (ts[i].price < price)
						{
							cout << endl << " ";
							cout << left << setw(4) << ts[i].id << setw(10) << ts[i].mark << setw(7) << ts[i].category << ts[i].price << setw(3) << "$" << ts[i].year << setw(3) << "y" << "Had beed used? ";
							if (ts[i].old)
								cout << "Yes";
							else
								cout << "No";
							cout << endl;
						}
					}

				if (mode == 's')
					for (int i = 0; i < ts.size(); i++)
					{
						if (ts[i].price == price)
						{
							cout << endl << " ";
							cout << left << setw(4) << ts[i].id << setw(10) << ts[i].mark << setw(7) << ts[i].category << ts[i].price << setw(3) << "$" << ts[i].year << setw(3) << "y" << "Had beed used? ";
							if (ts[i].old)
								cout << "Yes";
							else
								cout << "No";
							cout << endl;
						}
					}
				cout << endl;
			}
			break;
		}

		case 8:
		{
			if (!empty)
			{
				string waysave;
				cout << "Enter file position with txt. Example, cars.txt - file: C:\\\\Program Files\\\\cars.txt) >> ";
				cin >> waysave; // Enter Way

				cout << "Find by id or mark? (i/m) >> "; // Choose Find Mode
				char mode;
				cin >> mode;
				if (mode != 'i' && mode != 'm') // Check Find Mode
				{
					cout << " Unknown Find Car Mode\n\n";
					break;
				}

				for (int i = 0; i < ts.size(); i++)
				{
					cout << endl << " ";
					cout << left << setw(4) << ts[i].id << setw(10) << ts[i].mark << setw(7) << ts[i].category << ts[i].price << setw(3) << "$" << ts[i].year << setw(3) << "y" << "Had beed used? ";
					if (ts[i].old)
						cout << "Yes" << endl;
					else
						cout << "No" << endl;
				}

				int cari = -1;

				if (mode == 'i') // Id mode
				{
					cout << "\nEnter id >> ";
					int id;
					cin >> id;
					if (id < 1)
					{
						cout << " Invalid Id\n\n";
						break;
					}
					for (int i = 0; i < ts.size(); i++)
					{
						if (ts[i].id == id)
						{
							cari = i;
						}
					}

				}
				if (mode == 'm') // Mark Mode
				{
					cout << "\nEnter mark >> ";
					string mark;
					cin >> mark;
					for (int i = 0; i < ts.size(); i++)
					{
						if (ts[i].mark == mark)
						{
							cari = i;
						}
					}
				}

				if (cari == -1) // Fail
				{
					cout << " Can't find car, try again please\n\n";
					break;
				}
				else
				{
					fout.open(waysave); // Fout Passport
					fout << " ---Car Passport---" << endl;
					fout << " Id---------" << ts[cari].id << endl;
					fout << " Mark-------" << ts[cari].mark << endl;
					fout << " Category---" << ts[cari].category << endl;
					fout << " Price------" << ts[cari].price << "$" << endl;
					fout << " Year-------" << ts[cari].year << "y" << endl;
					fout << " Used?------";
					if (ts[cari].old)
						fout << "Yes";
					if (!ts[cari].old)
						fout << "No";
					fout.close();
				}
				cout << endl;
			}
			break;
		}

		case 0:
			exit(0);

		default:
			cout << "\n Invalid Answer\n\n";
		}
	}
}